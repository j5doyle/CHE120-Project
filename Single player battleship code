#John Doyle (JD), Nathan Yu (NY), Nikhil Bronson (NB), Viktor Ng (VN)
from random import randint
import os

#Ship Class
class Ship: #NY: Creates a class for the ships.
  def __init__(self, size, orientation, location): #NY: Defines the orientation, size and position of the ships on the board.
    self.size = size
    
    if orientation == 'horizontal' or orientation == 'vertical':
      self.orientation = orientation 
    else:
      raise ValueError("Value must be 'horizontal' or 'vertical'.")
    
    if orientation == 'horizontal':
      if location['row'] in range(row_size):
        self.coordinates = []
        for index in range(size):
          if location['col'] + index in range(col_size):
            self.coordinates.append({'row': location['row'], 'col': location['col'] + index}) #NY: Enters the ships coordinates on a row as a list of the indexes of the columns
          else:
            raise IndexError("Column is out of range.") #NY: Makes sure the whole ship is on a column that exists
      else:
        raise IndexError("Row is out of range.") #NY: Makes sure the ship is on a row that exists
    elif orientation == 'vertical': #NY: Does the same thing listed above, but inverted for vertical ships
      if location['col'] in range(col_size):
        self.coordinates = [] 
        for index in range(size): 
          if location['row'] + index in range(row_size):
            self.coordinates.append({'row': location['row'] + index, 'col': location['col']}) 
          else:
            raise IndexError("Row is out of range.")
      else:
        raise IndexError("Column is out of range.")

    if self.filled(): #NY: Checks to see if new ships location is already filled by another ship
      print_board(board) #NY: prints the updated board, for debugging (not going to show while playing the game)
      print(" ".join(str(coords) for coords in self.coordinates)) #NY: Joins all the coordinates in a list together in one long string
      raise IndexError("A ship already occupies that space.")
    else:
      self.fillBoard() #NY: Updates the board with the new ships coordinates
  
  def filled(self): #NY: Checks to make sure ships arent overlapping.
    for coords in self.coordinates:
      if board[coords['row']][coords['col']] == 1: #NY: 1 means a spot on the board is occupied already, 0 would mean the spot is empty
        return True
    return False
  
  def fillBoard(self): #NY: Updates the board with the new ship's coordinates.
    for coords in self.coordinates:
      board[coords['row']][coords['col']] = 1 #NY: For every coordinate in the ship, asssigns that coordinate 1 indicating it's occupied.

  def contains(self, location): #NY: Checks to see if the coords of the ship match the location of the shot.
    for coords in self.coordinates: 
      if coords == location:
        return True
    return False
  
  def destroyed(self): #NY: Checks to see if the ship is destroyed
    for coords in self.coordinates:
      if board_display[coords['row']][coords['col']] == 'O': #NY: If the coordinates of the ship are 0, means the ship hasn't been found yet and is not sunk.
        return False
      elif board_display[coords['row']][coords['col']] == '*':
        raise RuntimeError("Board display inaccurate")
    return True #NY: If the ships coordinates are all 1, means the ship has been found and is destroyed.

  
#Settings Variables
row_size = 9 #number of rows
col_size = 9 #number of columns
num_ships = 4
max_ship_size = 5
min_ship_size = 2
num_turns = 40

#Create lists
ship_list = []

board = [[0] * col_size for x in range(row_size)]

board_display = [["O"] * col_size for x in range(row_size)]#NB: Creates the map for battle ship by making a list of lists

#Functions
def print_board(board_array): #VN: This function creates the board that we will be playing on
  print("\n  " + " ".join(str(x) for x in range(1, col_size + 1)))
  for r in range(row_size):
    print(str(r + 1) + " " + " ".join(str(c) for c in board_array[r]))
  print()

def search_locations(size, orientation): #VN: This functionn is used within the function random_locations to make sure the ships fit on the board
  locations = []

  if orientation != 'horizontal' and orientation != 'vertical': #NB: Makes sure the ship isnt diagonal, random or None
    raise ValueError("Orientation must have a value of either 'horizontal' or 'vertical'.")

  if orientation == 'horizontal': 
    if size <= col_size:
      for r in range(row_size):
        for c in range(col_size - size + 1):
          if 1 not in board[r][c:c+size]:
            locations.append({'row': r, 'col': c}) #Appends dicts to the lis of valid locations ie. [{'row': r, 'col': c}] for horizontal alignment
  elif orientation == 'vertical':
    if size <= row_size:
      for c in range(col_size):
        for r in range(row_size - size + 1):
          if 1 not in [board[i][c] for i in range(r, r+size)]:
            locations.append({'row': r, 'col': c})#NB: Same logic as above but for vertical

  if not locations: #NB: If locations from above is true and has valid entries, will return the locations, otherwise return None
    return 'None'
  else:
    return locations

def random_location(): #VN: This generates a dataset for the size and location of a ship
#NB: Randomly creates size of ship, figures out orientation, and whether the ship can fit in a certain part of the map
  size = randint(min_ship_size, max_ship_size)
  orientation = 'horizontal' if randint(0, 1) == 0 else 'vertical'

  locations = search_locations(size, orientation) #NB: Checks whether there is a valid location for the ship size and orientation>
  #NB: If not, return None, if is, return the dict with randomly selected placement details
  if locations == 'None':
    return 'None'
  else:
    return {'location': locations[randint(0, len(locations) - 1)], 'size': size,\
     'orientation': orientation}

def get_row(): #VN: This row asks the player for a row number
  while True: #NB: If player doesn't pick a row number in the created map, prints accordingly
    try:
      guess = int(input("Row Guess: "))
      if guess in range(1, row_size + 1):
        return guess - 1
      else:
        print("\nOops, that's not even in the ocean.")
    except ValueError:
      print("\nPlease enter a number")

def get_col(): #VN: This row asks the player for a column number 
  while True: #NB: Same logic as above
    try:
      guess = int(input("Column Guess: "))
      if guess in range(1, col_size + 1):
        return guess - 1
      else:
        print("\nOops, that's not even in the ocean.")
    except ValueError:
      print("\nPlease enter a number")

# Create the ships
#VN: As the above says, this creates the ships, up to the amount that you set with the num_ships variable
temp = 0 #NB: Counter to track successful ship placements
while temp < num_ships:
  ship_info = random_location()
  if ship_info == 'None':
    continue
  else:
    ship_list.append(Ship(ship_info['size'], ship_info['orientation'], ship_info['location']))#NB: Adds the ships to list of ships
    temp += 1 #NB:Track number of successful ship placements
del temp

# Play Game
os.system('clear')
print_board(board_display) #VN: Prints the board

for turn in range(num_turns): #VN: This allows the player to keep track of the number of turns and is the loop that contains the main game
                              #VN: It repeats for the amount of turns specified, or until all the ships have been destroyed
  print("Turn:", turn + 1, "of", num_turns)
  print("Ships left:", len(ship_list))
  print()
  
  guess_coords = {}
  while True: #NB: Determines if player picked an already guessed position
    guess_coords['row'] = get_row()
    guess_coords['col'] = get_col()
    if board_display[guess_coords['row']][guess_coords['col']] == 'X' or board_display[guess_coords['row']][guess_coords['col']] == '*': #NB: Determines if guessed by checking X for hit ship and * For missed shot. If either, ask to pick again
      print("\nYou guessed that one already.")
    else:
      break

  os.system('clear')

  ship_hit = False
  for ship in ship_list: 
    if ship.contains(guess_coords): #VN: This checks the list 'ship', that features the coordinates of the ship's body, for the guessed coordinates
                                    #VN: If the guessed coordinates are in the list, the ship is hit
      print("Hit!")
      ship_hit = True
      board_display[guess_coords['row']][guess_coords['col']] = 'X'
      if ship.destroyed():
        print("Ship Destroyed!")
        ship_list.remove(ship)
      break
  if not ship_hit: #NB: If missed, replaces the missed spot with an asterix to simplify future selection process
    board_display[guess_coords['row']][guess_coords['col']] = '*'
    print("You missed!")

  print_board(board_display)
  
  if not ship_list: #VN: This checks if the list is empty, if it is then the loop breaks and the game ends
    break

# End Game 
#VN: Ends the game and outputs a line based on if you won or lost
if ship_list:
  print("You lose!")
else:
  print("All the ships are sunk. You win!")
